CREATE OR REPLACE PROCEDURE PP_RDS.SPC_XMR_CHART_CREATE(VARARGS)
RETURNS REFTABLE(PRDRDS.PP_RDS.SPC_XMR_CHART_DATA)
LANGUAGE NZPLSQL AS
BEGIN_PROC


DECLARE 
	v_SPC_DATA_QUERY VARCHAR(5000);
	v_SPC_DATASET_NAME ALIAS FOR $2;
	v_INTERVENTION_DT_STR ALIAS FOR $3;
	v_INTERVENTION_REASON ALIAS FOR $4;
	v_DELETE_INTERVENTION ALIAS FOR $5;
	v_USERNAME ALIAS FOR $6;
	v_BASELINE ALIAS FOR $7;
	v_INTERVENTION_DT DATE;
	v_PROMPT_REPLACE_TXT VARCHAR(20);
	v_PROMPT_VALUE VARCHAR(1000);
	v_PROMPT_TYPE VARCHAR(100);

BEGIN
	v_SPC_DATA_QUERY := $1;
		
	FOR idx IN 8 .. PROC_ARGUMENT_TYPES.count
	LOOP
		v_PROMPT_REPLACE_TXT := '#prompt' || idx - 7 || '#';
		v_PROMPT_TYPE = GET_VALUE_VARCHAR(ARRAY_SPLIT($idx,'~'),2);
		v_PROMPT_VALUE = GET_VALUE_VARCHAR(ARRAY_SPLIT($idx,'~'),1);
		v_PROMPT_VALUE = '''' || REPLACE(v_PROMPT_VALUE, ',', '''::'|| v_PROMPT_TYPE ||',''') || '''' || '::' || v_PROMPT_TYPE;
		v_SPC_DATA_QUERY := REPLACE(v_SPC_DATA_QUERY, v_PROMPT_REPLACE_TXT, v_PROMPT_VALUE);
    END LOOP;
	
	IF v_INTERVENTION_DT_STR <> '1900-01-01' THEN
		v_INTERVENTION_DT := to_date( v_INTERVENTION_DT_STR, 'DD/MM/YYYY' );
		IF v_DELETE_INTERVENTION = 0 THEN
		    INSERT INTO PP_RDS.SPC_XMR_CHART_INTERVENTION
			( SPC_DATASET_NAME, INTERVENTION_DT, INTERVENTION_GROUP, INTERVENTION_REASON, INTERVENTION_ADDED_DTTM, INTERVENTION_REMOVED, INTERVENTION_ADDED_BY )
			SELECT v_SPC_DATASET_NAME, v_INTERVENTION_DT, -1, v_INTERVENTION_REASON, CURRENT_TIMESTAMP, 0, v_USERNAME
			WHERE NOT EXISTS ( SELECT 1 FROM PP_RDS.SPC_XMR_CHART_INTERVENTION
										WHERE SPC_DATASET_NAME = v_SPC_DATASET_NAME AND INTERVENTION_DT = v_INTERVENTION_DT
										AND INTERVENTION_REMOVED=0 );
		ELSE
			UPDATE PP_RDS.SPC_XMR_CHART_INTERVENTION
			SET INTERVENTION_REMOVED_DTTM = CURRENT_TIMESTAMP, INTERVENTION_REMOVED = 1, INTERVENTION_REMOVED_BY = v_USERNAME
			WHERE SPC_DATASET_NAME = v_SPC_DATASET_NAME AND INTERVENTION_DT = v_INTERVENTION_DT AND INTERVENTION_REMOVED = 0;
		END IF;
				
		UPDATE PP_RDS.SPC_XMR_CHART_INTERVENTION q1
		SET q1.INTERVENTION_GROUP = q2.ROW_NUM
		FROM (SELECT	SPC_DATASET_NAME
						, INTERVENTION_DT
						, ROW_NUMBER() OVER( PARTITION BY SPC_DATASET_NAME ORDER BY INTERVENTION_DT ) AS ROW_NUM
						FROM PP_RDS.SPC_XMR_CHART_INTERVENTION
						WHERE SPC_DATASET_NAME = v_SPC_DATASET_NAME AND INTERVENTION_REMOVED=0) q2
		WHERE q1.SPC_DATASET_NAME = q2.SPC_DATASET_NAME and q1.INTERVENTION_DT = q2.INTERVENTION_DT AND q1.INTERVENTION_REMOVED=0;
	END IF;
	
	EXECUTE IMMEDIATE 'INSERT INTO ' || REFTABLENAME || 
	' with spc_data as (' || v_SPC_DATA_QUERY || '),
						
		spc_data_row as (select	'''|| v_SPC_DATASET_NAME || ''' as SPC_DATASET_NAME
							, q1.DATE_AXIS
							, q1.MEASURE_VALUE
							, q2.INTERVENTION_REASON
							, nvl(max(q3.INTERVENTION_GROUP), 0) as INTERVENTION_GROUP
							, ROW_NUMBER() over (order by q1.DATE_AXIS) AS ROW_NUM
							, ROW_NUMBER() over (partition by nvl(max(q3.INTERVENTION_GROUP), 0) order by q1.DATE_AXIS) AS ROW_NUM_GROUP
							from spc_data q1
							left outer join PP_RDS.SPC_XMR_CHART_INTERVENTION q2
							on ''' || v_SPC_DATASET_NAME || ''' = q2.SPC_DATASET_NAME and q1.DATE_AXIS = q2.INTERVENTION_DT AND q2.INTERVENTION_REMOVED=0
							left outer join PP_RDS.SPC_XMR_CHART_INTERVENTION q3
							on ''' || v_SPC_DATASET_NAME || ''' = q3.SPC_DATASET_NAME and q1.DATE_AXIS >= q3.INTERVENTION_DT AND q3.INTERVENTION_REMOVED=0
							group by 1, q1.DATE_AXIS, q1.MEASURE_VALUE, q2.INTERVENTION_REASON),							
	
		spc_mean as (select INTERVENTION_GROUP, avg(MEASURE_VALUE) as MEAN 
							from spc_data_row
							where CASE WHEN ' || v_BASELINE || ' = 0 THEN 1=1 ELSE ROW_NUM_GROUP <= ' || v_BASELINE || ' END
							group by INTERVENTION_GROUP), 
		
		spc_moving_range as (select ROW_NUM
									, ROW_NUM_GROUP
									, INTERVENTION_GROUP
									, MEASURE_VALUE - LAG(MEASURE_VALUE, 1) OVER (ORDER BY ROW_NUM) AS DIFFERENCE
									, ABS(MEASURE_VALUE - LAG(MEASURE_VALUE, 1) OVER (ORDER BY ROW_NUM)) AS MOVING_RANGE
									, CASE WHEN MEASURE_VALUE > LAG(MEASURE_VALUE, 1) OVER (ORDER BY ROW_NUM) THEN 1 ELSE 0 END AS ASCENDING_VALUE
									from spc_data_row),
		
		spc_avg_moving_range as (select INTERVENTION_GROUP
										, avg(MOVING_RANGE) as AVG_MOVING_RANGE 
										from spc_moving_range
										where CASE WHEN ' || v_BASELINE || ' = 0 THEN 1=1 ELSE ROW_NUM_GROUP <= ' || v_BASELINE || ' END
										group by INTERVENTION_GROUP),
		
		spc_dataset as (select  q1.ROW_NUM
								, q1.SPC_DATASET_NAME
								, q1.INTERVENTION_GROUP
								, q1.INTERVENTION_REASON
								, q1.DATE_AXIS
								, q1.MEASURE_VALUE
								, q2.MEAN
								, q3.MOVING_RANGE
								, q4.AVG_MOVING_RANGE
								, CASE WHEN q2.MEAN - (q4.AVG_MOVING_RANGE * 2.66) < 0 THEN 0 ELSE q2.MEAN - (q4.AVG_MOVING_RANGE * 2.66) END as LCL -- Sequential Standard Deviation = 3 * mean(mR)/1.128
								, q2.MEAN + (q4.AVG_MOVING_RANGE * 2.66) as UCL
								, CASE WHEN q1.MEASURE_VALUE > q2.MEAN THEN 1 ELSE 0 END AS ABOVE_MEAN
								, CASE WHEN q1.MEASURE_VALUE < q2.MEAN THEN 1 ELSE 0 END AS BELOW_MEAN
								, CASE WHEN q1.MEASURE_VALUE > UCL or q1.MEASURE_VALUE < LCL THEN 1 ELSE 0 END AS OUTSIDE_CL
								, q3.DIFFERENCE
								, q4.AVG_MOVING_RANGE * 3.27 AS MOVING_RANGE_LIMIT
								, CASE WHEN Q3.MOVING_RANGE > MOVING_RANGE_LIMIT THEN 1 ELSE 0 END as ABOVE_MOVING_RANGE_LIMIT
								, ASCENDING_VALUE
								, CASE WHEN ASCENDING_VALUE = 0 THEN 1 ELSE 0 END as DESCENDING_VALUE
								, CASE WHEN q2.MEAN - ((2.66 * AVG_MOVING_RANGE * 2/3)) < 0 THEN 0 ELSE q2.MEAN - ((2.66 * AVG_MOVING_RANGE * 2/3)) END as LOWER_TWO_SIGMA
								, q2.MEAN + ((2.66 * AVG_MOVING_RANGE * 2/3)) as UPPER_TWO_SIGMA
								, CASE WHEN q1.MEASURE_VALUE < LOWER_TWO_SIGMA THEN 1 ELSE 0 END as BELOW_LOWER_TWO_SIGMA
								, CASE WHEN q1.MEASURE_VALUE > UPPER_TWO_SIGMA THEN 1 ELSE 0 END as ABOVE_UPPER_TWO_SIGMA					
								from spc_data_row q1
								inner join spc_mean q2
								on q1.INTERVENTION_GROUP = q2.INTERVENTION_GROUP
								inner join spc_moving_range q3
								on q1.ROW_NUM = q3.ROW_NUM
								inner join spc_avg_moving_range q4
								on q1.INTERVENTION_GROUP = q4.INTERVENTION_GROUP),
								
		spc_groups as (select 	ROW_NUM, ABOVE_MEAN, BELOW_MEAN, DESCENDING_VALUE, ASCENDING_VALUE
								, sum(BELOW_MEAN) over(order by ROW_NUM ROWS BETWEEN CURRENT ROW AND 7 FOLLOWING) as BELOW_MEAN_RUN
								, sum(ABOVE_MEAN) over(order by ROW_NUM ROWS BETWEEN CURRENT ROW AND 7 FOLLOWING) as ABOVE_MEAN_RUN
								, sum(DESCENDING_VALUE) over(order by ROW_NUM ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) as DESCENDING_VALUE_RUN
								, sum(ASCENDING_VALUE) over(order by ROW_NUM ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) as ASCENDING_VALUE_RUN
								from spc_dataset),
								
		spc_set_groups as (select	ROW_NUM
									, last_value(case when BELOW_MEAN_RUN >= 8 then 1 when BELOW_MEAN=0 then 0 end ignore nulls) over (order by ROW_NUM rows between unbounded preceding and current row) as BELOW_MEAN_GROUP
									, last_value(case when ABOVE_MEAN_RUN >= 8 then 1 when ABOVE_MEAN=0 then 0 end ignore nulls) over (order by ROW_NUM rows between unbounded preceding and current row) as ABOVE_MEAN_GROUP
									, last_value(case when DESCENDING_VALUE_RUN >= 6 then 1 when DESCENDING_VALUE=0 then 0 end ignore nulls) over (order by ROW_NUM rows between unbounded preceding and current row) as DESCENDING_VALUE_GROUP
									, last_value(case when ASCENDING_VALUE_RUN >= 6 then 1 when ASCENDING_VALUE=0 then 0 end ignore nulls) over (order by ROW_NUM rows between unbounded preceding and current row) as ASCENDING_VALUE_GROUP
									from spc_groups),
									
		spc_2_of_3 as (select 	ROW_NUM
								, CASE 	WHEN BELOW_LOWER_TWO_SIGMA = 0 THEN 0
								 		WHEN sum(BELOW_LOWER_TWO_SIGMA) over(order by ROW_NUM ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) >= 2 THEN 1
										WHEN sum(BELOW_LOWER_TWO_SIGMA) over(order by ROW_NUM ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) >= 2 THEN 1
										WHEN sum(BELOW_LOWER_TWO_SIGMA) over(order by ROW_NUM ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) >= 2 THEN 1
										ELSE 0 END BELOW_LOWER_TWO_SIGMA_GROUP
								, CASE 	WHEN ABOVE_UPPER_TWO_SIGMA = 0 THEN 0
								 		WHEN sum(ABOVE_UPPER_TWO_SIGMA) over(order by ROW_NUM ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) >= 2 THEN 1
										WHEN sum(ABOVE_UPPER_TWO_SIGMA) over(order by ROW_NUM ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) >= 2 THEN 1
										WHEN sum(ABOVE_UPPER_TWO_SIGMA) over(order by ROW_NUM ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) >= 2 THEN 1
										ELSE 0 END ABOVE_UPPER_TWO_SIGMA_GROUP
								from spc_dataset)
								
		select q1.*
		, q2.BELOW_MEAN_GROUP
		, q2.ABOVE_MEAN_GROUP
		, q2.DESCENDING_VALUE_GROUP
		, q2.ASCENDING_VALUE_GROUP
		, q3.BELOW_LOWER_TWO_SIGMA_GROUP
		, q3.ABOVE_UPPER_TWO_SIGMA_GROUP
		, CASE	WHEN q1.OUTSIDE_CL=1 THEN 1
				WHEN q2.DESCENDING_VALUE_GROUP=1 THEN 2
				WHEN q2.ASCENDING_VALUE_GROUP=1 THEN 2
				WHEN q2.BELOW_MEAN_GROUP=1 THEN 3
				WHEN q2.ABOVE_MEAN_GROUP=1 THEN 3			
				WHEN q3.BELOW_LOWER_TWO_SIGMA_GROUP=1 THEN 4
				WHEN q3.ABOVE_UPPER_TWO_SIGMA_GROUP=1 THEN 4
				ELSE 0 END as RULE_HIT
		from spc_dataset q1
		left outer join spc_set_groups q2
		on q1.ROW_NUM = q2.ROW_NUM
		left outer join spc_2_of_3 q3
		on q1.ROW_NUM = q3.ROW_NUM';
	
RETURN REFTABLE;
END; 

END_PROC;
